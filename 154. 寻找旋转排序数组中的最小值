class Solution:
    def findMin(self, nums: List[int]) -> int:
        #二分法
        left = 0
        right = len(nums)-1
        while left < right:
            mid = (left + right) // 2#中间位置
            #如果mid索引的值大于right索引的值，左边索引+1
            #如果mid索引的值小于right索引的值，右边索引等于mid索引
            #如果mid索引的值等于右边索引的值，右边索引-1
            if nums[mid] > nums[right]: #此时nums[mid]一定在第一个排序数组中,一定比右边数组的任意值大，所以使左边索引等于mid+1
                left = mid + 1
            elif nums[mid] < nums[right]:#此时nums[mid]一定在右边数组中，一定存在最小值，所以使right等于mid
                right = mid
            #当 nums[mid] == nums[right] 时，是此题对比 153题 的难点（原因是此题中数组的元素可重复，难以判断分界点i的指针区间）
            #例如 [1,0,1,1,1][1, 0, 1, 1, 1][1,0,1,1,1] 和 [1,1,1,0,1][1, 1, 1, 0, 1][1,1,1,0,1] ，
            #在 left = 0, right = 4, mid = 2 时，无法判断 midmidmid 在哪个排序数组中。
            #我们采用 right = right - 1 解决此问题，证明：
            #此操作不会使数组越界：因为迭代条件保证了 right > left >= 0；
            #此操作不会使最小值丢失：假设 nums[right]nums[right]nums[right] 是最小值，有两种情况：
            #若 nums[right]nums[right]nums[right] 是唯一最小值：那就不可能满足判断条件 nums[mid] == nums[right]，
            #因为 mid < right（left != right 且 mid = (left + right) // 2 向下取整）；
            #若 nums[right]nums[right]nums[right] 不是唯一最小值，由于 mid < right 而 nums[mid] == nums[right]，
            #即还有最小值存在于 [left,right−1][left, right - 1][left,right−1] 区间，因此不会丢失最小值。
            else: 
                right = right - 1 # key
        return nums[left]

